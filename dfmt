#!/bin/bash

#docker format utility for the --format flag




#python script to print the fields of a dict/json object
    #used to get up to date fields for docker images, containers, etc 

PAWK_SCRIPT='
i = eval(inp)
for key in i.keys():
    print(key,end=" ")
'

if which pawk &> /dev/null && which docker &> /dev/null ;then 
    #up to date fields for docker images, containers, networks, and volumes
    _DOCKER_IMAGES_FIELDS=$(docker image ls --format json|head -n 1 |pawk "$PAWK_SCRIPT")
    _DOCKER_CONTAINER_FIELDS=$(docker container ls --format json|head -n 1 |pawk "$PAWK_SCRIPT")
    _DOCKER_NETWORK_FIELDS=$(docker network ls --format json|head -n 1 |pawk "$PAWK_SCRIPT")
    _DOCKER_VOLUME_FIELDS=$(docker volume ls --format json|head -n 1 |pawk "$PAWK_SCRIPT")
else 
    #default fields for docker images, containers, networks, and volumes
    _DOCKER_IMAGES_FIELDS=$(echo ANOTHER Containers CreatedAt CreatedSince Digest ID Repository SharedSize Size Tag UniqueSize VirtualSize)
    _DOCKER_CONTAINER_FIELDS=$(echo Command CreatedAt ID Image Labels LocalVolumes Mounts Names Networks Ports RunningFor Size State Status)
    _DOCKER_NETWORK_FIELDS=$(echo CreatedAt Driver ID IPv6 Internal Labels Name Scope)
    _DOCKER_VOLUME_FIELDS=$(echo Availability Driver Group Labels Links Mountpoint Name Scope Size Status)
fi


red=$'\033[1;31m'
blue=$'\033[1;34m'
nc=$'\033[0m'

PREFIX=""
SUFFIX=""

printBlue(){
    printf "${blue}$@${nc}\n"
}
printRed(){
    printf "${red}$@${nc}\n"
}

capitilize(){
    echo $1 | awk '{print toupper(substr($1,1,1))substr($1,2)}'
}



function printFunctionality(){
    iterateAndPrint(){
        PRINT_FUNCTION=$1
        shift 
        THE_FIELD=""
        count=0
        for field in $@; do
            if [ -z "$THE_FIELD" ]; then
                THE_FIELD="[$field]"
            else
                THE_FIELD="$THE_FIELD [$field]"
            fi
            count=$((count+1))
            if [ $count -eq 3 ]; then
                $PRINT_FUNCTION "\t$THE_FIELD"
                THE_FIELD=""
                count=0
            fi
        done
    }


    printBlue IMAGE 
    iterateAndPrint printRed $_DOCKER_IMAGES_FIELDS

    printBlue CONTAINER
    iterateAndPrint printRed $_DOCKER_CONTAINER_FIELDS

    printBlue NETWORK
    iterateAndPrint printRed $_DOCKER_NETWORK_FIELDS

    printBlue VOLUME
    iterateAndPrint printRed $_DOCKER_VOLUME_FIELDS
}


function getAlias(){
    function getSimilar(){
        ITEMS="containers image digest id repository 
        labels command createdat createdsince size sharedsize 
        localvolumes mounts ipv6scope ingress internal"
        for item in $ITEMS; do
            if [[ "$item" =~ "$@" ]]; then
                echo "$(capitilize "$item")"
                return 0
            fi
        done

        if [[ $@ == .* ]]; then
            getSimilarInp="$@"
            getSimilarInp="${getSimilarInp#.}"
            echo $(capitilize $getSimilarInp)
        else
            echo ""
        fi
    }

    case $1 in
        cont) echo "Containers" ;;
        img) echo "Image" ;;
        dig) echo "Digest" ;;
        i) echo "ID" ;;
        id) echo "ID" ;;
        repo) echo "Repository" ;;
        l) echo "Labels" ;;
        cmd) echo "Command" ;;
        creat) echo "CreatedAt" ;;
        creats) echo "CreatedSince" ;;
        size) echo "Size" ;;
        sz) echo "Size" ;;
        ssize) echo "SharedSize" ;;
        nm) echo "Name" ;;
        lv) echo "LocalVolumes" ;;
        mnt) echo "Mounts" ;;
        scope) echo "IPv6Scope" ;;
        ing) echo "Ingress" ;;
        int) echo "Internal" ;;
        *) echo $(getSimilar $@) ;;
    esac
}



FORM=""
input="$@"
tab="1"

if [ -z "$SEP" ]; then
    SEP='\t'
fi

del=$SEP

pycode="print(r'$del' * $tab)"

seperator=$(python -c "$pycode")


if [ -z "$input" ]; then
    printFunctionality 
else
    OUTPUT=""
    for inp in $@; do 
        # echo "[$inp]"
        # continue
        ARG=$(getAlias $inp)
        

        #capitalize the argument for correct output
        if [ -z "$ARG" ]; then
            ARG=$(capitilize $inp)
        fi

        #append to output string
        if [ -z "$OUTPUT" ]; then
            OUTPUT="{{.$ARG}}$seperator"
        else
            OUTPUT="$OUTPUT{{.$ARG}}$seperator"
        fi
    done
    echo "$OUTPUT"

fi

# echo d images $(dfmt i size )



